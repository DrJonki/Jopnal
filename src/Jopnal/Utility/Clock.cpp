/////////////////////////////////////////////////////////////////////////////////////////////////
//
// Clock.cpp
// Created on 16.4.2015 at 19:21:52
//
/////////////////////////////////////////////////////////////////////////////////////////////////
/*
* Gene Pool C++ Library
* Copyright (c) 2015 Joona Tiinanen
* http://www.gene-pool-engine.com
*
*
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
*
* For license information see the included LICENSE.md file.
*
*/
/////////////////////////////////////////////////////////////////////////////////////////////////

// Headers
#include <Jopnal/Precompiled.hpp>

/////////////////////////////////////////////////////////////////////////////////////////////////


namespace jop
{
    Clock::Time::Time(const uint64 nsec)
        : m_nanoseconds(nsec)
    {}

    /////////////////////////////////////////////////////////////////////////////////////////////////

    float64 Clock::Time::asSeconds() const
    {
        return static_cast<float64>(m_nanoseconds) / 1000000000.0;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////

    uint32 Clock::Time::asMilliseconds() const
    {
        return static_cast<uint32>(m_nanoseconds / 1000000);
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////

    uint64 Clock::Time::asMicroseconds() const
    {
        return m_nanoseconds / 1000;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////

    uint64 Clock::Time::asNanoseconds() const
    {
        return m_nanoseconds;
    }


    /////////////////////////////////////////////////////////////////////////////////////////////////


    Clock::Clock()
        : m_clock(),
          m_lastTime(m_clock.now())
    {}

    /////////////////////////////////////////////////////////////////////////////////////////////////

    Clock::Time Clock::reset()
    {
        const Time time(getElapsedTime());

        m_lastTime = m_clock.now();

        return time;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////

    Clock::Time Clock::getElapsedTime() const
    {
        return Time(static_cast<uint64>(std::chrono::nanoseconds(m_clock.now() - m_lastTime).count()));
    }
}