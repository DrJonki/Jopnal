// Jopnal shadows shader plugin file
//
// Jopnal license applies.


#plugin <Jopnal/DefaultLighting/Shadows>

    #if JMAT_MAX_POINT_LIGHTS > 0

        uniform samplerCube u_PointLightShadowMaps[JMAT_MAX_POINT_LIGHTS];

        #if __VERSION__ >= 300
        
            // Offset directions for sampling point shadows
            const vec3 g_gridSamplingDisk[20] = vec3[]
            (
                vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1),
                vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
                vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
                vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
                vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
            );

        #endif

        float jop_CalculatePointShadow(const in vec3 lightDir, const in float farPlane, const in samplerCube samp)
        {
            // Test for shadows with PCF
            #if __VERSION__ >= 300

                // Get current linear depth as the length between the fragment and light position
                float currentDepth = length(lightDir);

                float shadow = 0.0;
                const float bias = 0.15;
                const int samples = 20;

                float viewDistance = length(-vf_Position);
                float diskRadius = (1.0 + (viewDistance / farPlane)) / 25.0;
                for (int i = 0; i < samples; ++i)
                {
                    vec3 sampCoords = lightDir + g_gridSamplingDisk[i] * diskRadius;
                    
                    float closestDepth = JOP_TEXTURE_CUBE(samp, sampCoords).r;

                    // Undo mapping [0,1]
                    closestDepth *= farPlane;

                    if (currentDepth - bias > closestDepth)
                        shadow += 1.0;
                }
                shadow /= float(samples);

                return shadow;

            #else

                float closestDepth = JOP_TEXTURE_CUBE(samp, lightDir).r;

                closestDepth *= farPlane;

                float currentDepth = length(lightDir);

                const float bias = 0.05;

                return currentDepth - bias > closestDepth ? 1.0 : 0.0;

            #endif
        }

    #endif

    #if JMAT_MAX_DIRECTIONAL_LIGHTS > 0 || JMAT_MAX_SPOT_LIGHTS > 0

        #if JMAT_MAX_DIRECTIONAL_LIGHTS > 0
            uniform sampler2D u_DirectionalLightShadowMaps[JMAT_MAX_DIRECTIONAL_LIGHTS];
        #endif
        #if JMAT_MAX_SPOT_LIGHTS > 0
            uniform sampler2D u_SpotLightShadowMaps[JMAT_MAX_SPOT_LIGHTS];
        #endif

        // Shadow calculation for directional and spot lights
        float jop_CalculateDirSpotShadow(const in vec3 projCoords, const in vec3 norm, const in vec3 lightDir, const in sampler2D samp)
        {
            // Get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
            float closestDepth = JOP_TEXTURE_2D(samp, projCoords.xy).r;

            // Get depth of current fragment from light's perspective
            float currentDepth = projCoords.z;

            // Check whether current frag pos is in shadow
            float bias = max(0.05 * (1.0 - dot(norm, lightDir)), 0.005);

            float shadow = 0.0;

            if (projCoords.z > 1.0)
                shadow = 0.0;

            // Do percentage-closer filtering
            else
            {
            #if __VERSION__ >= 300

                vec2 texelSize = vec2(1.0) / vec2(textureSize(samp, 0));
                for(int x = -1; x <= 1; ++x)
                {
                    for(int y = -1; y <= 1; ++y)
                    {
                        float pcfDepth = JOP_TEXTURE_2D(samp, projCoords.xy + vec2(x, y) * texelSize).r;
                        shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
                    }    
                }
                shadow /= 9.0;

            #else

                shadow = float(currentDepth - bias > closestDepth);

            #endif
            }

            return shadow;
        }

    #endif

#pluginend