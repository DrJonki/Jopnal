// Jopnal lighting shader plugin file
//
// Jopnal license applies.

// Required uniforms for lighting calculations
//
// Required by both lighting and shadows
//
#plugin <Jopnal/DefaultLighting/Uniforms>

    #include <Jopnal/DefaultLighting/Structures>

    uniform Material u_Material;

    #if JMAT_MAX_POINT_LIGHTS > 0

        uniform PointLightInfo u_PointLights[JMAT_MAX_POINT_LIGHTS];
        uniform int u_NumPointLights;

    #endif

    #if JMAT_MAX_SPOT_LIGHTS > 0

        uniform SpotLightInfo u_SpotLights[JMAT_MAX_SPOT_LIGHTS];
        uniform int u_NumSpotLights;

    #endif

    #if JMAT_MAX_DIRECTIONAL_LIGHTS > 0

        uniform DirectionalLightInfo u_DirectionalLights[JMAT_MAX_DIRECTIONAL_LIGHTS];
        uniform int u_NumDirectionalLights;

    #endif

#pluginend

// Default lighting functions
//
//
#plugin <Jopnal/DefaultLighting/Lighting>

    #if JMAT_MAX_POINT_LIGHTS > 0
        
        // Point light calculation
        void jop_CalculatePointLight(const in int index, const in float shininessMult, out vec3 ambient, out vec3 diffuse, out vec3 specular)
        {
            PointLightInfo l = u_PointLights[index];

            #if __VERSION__ < 300

                if (!l.enabled)
                {
                    ambient = vec3(0.0);
                    diffuse = vec3(0.0);
                    specular = vec3(0.0);
                }

            #endif

            // Direction from fragment to light
            vec3 lightDir = normalize(l.position - vf_Position);

            // Direction from fragment to eye
            vec3 viewDir = normalize(-vf_Position);

            // Calculate reflection direction (use a half-way vector)
            vec3 reflectDir = normalize(lightDir + viewDir);

            // Ambient impact
            ambient = l.ambient * vec3(u_Material.ambient);

            // Diffuse impact
            float diff = max(dot(vf_Normal, lightDir), 0.0);
            diffuse = diff * l.diffuse * vec3(u_Material.diffuse);

            // Specular impact
            float shininess = max(1.0, u_Material.shininess * shininessMult);
            float spec = (8.0 + shininess) / (8.0 * 3.14159265) * pow(max(dot(vf_Normal, reflectDir), 0.0), shininess);
            specular = l.specular * spec * vec3(u_Material.specular);

            // Attenuation
            float dist = length(l.position - vf_Position);
            float attenuation = 1.0 / (l.attenuation.x + l.attenuation.y * dist + l.attenuation.z * (dist * dist));
            ambient *= attenuation; diffuse *= attenuation; specular *= attenuation;
        }

    #endif

    #if JMAT_MAX_SPOT_LIGHTS > 0

        // Spot light calculation
        void jop_CalculateSpotLight(const in int index, const in float shininessMult, out vec3 ambient, out vec3 diffuse, out vec3 specular)
        {
            SpotLightInfo l = u_SpotLights[index];

            #if __VERSION__ < 300

                if (!l.enabled)
                {
                    ambient = vec3(0.0);
                    diffuse = vec3(0.0);
                    specular = vec3(0.0);
                }

            #endif

            // Direction from fragment to light
            vec3 lightDir = normalize(l.position - vf_Position);

            // Direction from fragment to eye
            vec3 viewDir = normalize(-vf_Position);

            // Calculate reflection direction (use a half-way vector)
            vec3 reflectDir = normalize(lightDir + viewDir);

            // Ambient impact
            ambient = l.ambient * vec3(u_Material.ambient);

            // Diffuse impact
            float diff = max(dot(vf_Normal, lightDir), 0.0);
            diffuse = l.diffuse * diff * vec3(u_Material.diffuse);

            // Specular impact
            float shininess = max(1.0, u_Material.shininess * shininessMult);
            float spec = (8.0 + shininess) / (8.0 * 3.14159265) * pow(max(dot(vf_Normal, reflectDir), 0.0), shininess);
            specular = l.specular * spec * vec3(u_Material.specular);

            // Spotlight soft edges
            float theta = dot(lightDir, -l.direction);
            float epsilon = (l.cutoff.x - l.cutoff.y);
            float intensity = clamp((theta - l.cutoff.y) / epsilon, 0.0, 1.0);
            diffuse *= intensity; specular *= intensity;

            // Attenuation
            float dist = length(l.position - vf_Position);
            float attenuation = 1.0 / (l.attenuation.x + l.attenuation.y * dist + l.attenuation.z * (dist * dist));
            ambient *= attenuation; diffuse *= attenuation; specular *= attenuation;
        }

    #endif

    #if JMAT_MAX_DIRECTIONAL_LIGHTS > 0

        // Directional light calculation
        void jop_CalculateDirectionalLight(const in int index, const in float shininessMult, out vec3 ambient, out vec3 diffuse, out vec3 specular)
        {
            DirectionalLightInfo l = u_DirectionalLights[index];

            #if __VERSION__ < 300

                if (!l.enabled)
                {
                    ambient = vec3(0.0);
                    diffuse = vec3(0.0);
                    specular = vec3(0.0);
                }

            #endif

            // Direction from light to fragment.
            // Directional light shines infinitely in the same direction,
            // so no need to take fragment position into account
            vec3 lightDir = -l.direction;

            // Direction from fragment to eye
            vec3 viewDir = normalize(-vf_Position);

            // Calculate reflection direction (use a half-way vector)
            vec3 reflectDir = normalize(lightDir + viewDir);

            // Ambient impact
            ambient = l.ambient * vec3(u_Material.ambient);

            // Diffuse impact
            float diff = max(dot(vf_Normal, lightDir), 0.0);
            diffuse = l.diffuse * diff * vec3(u_Material.diffuse);

            // Specular impact
            float shininess = max(1.0, u_Material.shininess * shininessMult);
            float spec = (8.0 + shininess) / (8.0 * 3.14159265) * pow(max(dot(vf_Normal, reflectDir), 0.0), shininess);
            specular = l.specular * spec * vec3(u_Material.specular);

            // No attenuation calculations here
            // Directional Light is infinite, Directional Light is eternal
        }

    #endif

    #if __VERSION__ >= 300
        #define JOP_POINT_LIMIT u_NumPointLights
        #define JOP_DIR_LIMIT u_NumDirectionalLights
        #define JOP_SPOT_LIMIT u_NumSpotLights
    #else
        #define JOP_POINT_LIMIT JMAT_MAX_POINT_LIGHTS
        #define JOP_DIR_LIMIT JMAT_MAX_DIRECTIONAL_LIGHTS
        #define JOP_SPOT_LIMIT JMAT_MAX_SPOT_LIGHTS
    #endif

#pluginend